# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Sat Apr 11 16:00:27 2009
from libnavi.gui.options import OptionsDialog
from wx.lib.pubsub import Publisher
from libnavi.gui.note import NotePage
from libnavi import meta

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
from wx.richtext import RichTextCtrl
# end wxGlade

import wx.lib.flatnotebook as fnb

def _(x):
    return x

class MainWindow(wx.Frame):
    def __init__(self, control):
        self.control = control
        # begin wxGlade: MainWindow.__init__
        wx.Frame.__init__(self, None, style=wx.DEFAULT_FRAME_STYLE)
        self.main_notebook = fnb.FlatNotebook(self)
        
        # Menu Bar
        self.main_menu = wx.MenuBar()
        self.file_item = wx.Menu()
        self.new_item = wx.MenuItem(self.file_item, wx.NewId(), _("&New...\tCtrl+N"), "", wx.ITEM_NORMAL)
        self.file_item.AppendItem(self.new_item)
        self.close_item = wx.MenuItem(self.file_item, wx.NewId(), _("&Close\tCtrl+W"), "", wx.ITEM_NORMAL)
        self.file_item.AppendItem(self.close_item)
        self.file_item.AppendSeparator()
        self.options_item = wx.MenuItem(self.file_item, wx.NewId(), _("&Options...\tF4"), "", wx.ITEM_NORMAL)
        self.file_item.AppendItem(self.options_item)
        self.file_item.AppendSeparator()
        self.quit_item = wx.MenuItem(self.file_item, wx.NewId(), _("&Quit\tCtrl+Q"), "", wx.ITEM_NORMAL)
        self.file_item.AppendItem(self.quit_item)
        self.main_menu.Append(self.file_item, _("&Note"))
        self.SetMenuBar(self.main_menu)
        # Menu Bar end
        #self.main_text = RichTextCtrl(self.main_notebook, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.on_new_item_click, self.new_item)
        self.Bind(wx.EVT_MENU, self.on_close_item_click, self.close_item)
        self.Bind(wx.EVT_MENU, self.on_options_item_click, self.options_item)
        self.Bind(wx.EVT_MENU, self.on_quit_item_click, self.quit_item)
        self.Bind(wx.EVT_CLOSE, self.on_close)
        # end wxGlade
        
        self.pages = []
        
        Publisher().subscribe(self.on_note_opened, 'note.opened')

    def __set_properties(self):
        # begin wxGlade: MainWindow.__set_properties
        self.SetTitle(meta.APPNAME)
        self.SetSize((720, 540))
        # end wxGlade
        style = self.main_notebook.GetWindowStyleFlag()
        style |= fnb.FNB_NO_X_BUTTON|fnb.FNB_MOUSE_MIDDLE_CLOSES_TABS
        style &= ~(fnb.FNB_TABS_BORDER_SIMPLE)
        style &= ~(fnb.FNB_VC71 | fnb.FNB_VC8 | fnb.FNB_FANCY_TABS | fnb.FNB_FF2)
        style |= fnb.FNB_VC8
        self.main_notebook.SetWindowStyleFlag(style)

    def __do_layout(self):
        # begin wxGlade: MainWindow.__do_layout
        main_sizer = wx.BoxSizer(wx.VERTICAL)
#        self.main_notebook.AddPage(self.main_text, _("tab1"))
        main_sizer.Add(self.main_notebook, 1, wx.EXPAND, 0)
        self.SetSizer(main_sizer)
        self.Layout()
        # end wxGlade

    def on_new_item_click(self, event): # wxGlade: MainWindow.<event_handler>
        dlg = wx.TextEntryDialog(self, _('Enter the note name:'), _('Note name'), '')
        if dlg.ShowModal() == wx.ID_OK:
            name = dlg.GetValue()
            self.control.notes.open_new_note(name)
        dlg.Destroy()
        event.Skip()
        
    def on_close_item_click(self, event): # wxGlade: MainWindow.<event_handler>
        event.Skip()
        
    def on_options_item_click(self, event): # wxGlade: MainWindow.<event_handler>
        options = OptionsDialog(self)
        options.ShowModal()
        event.Skip()

    def on_quit_item_click(self, event): # wxGlade: MainWindow.<event_handler>
        self.Close()
        
    def on_note_opened(self, message):
        note = message.data
        page = NotePage(note, self.main_notebook)
        self.pages.append(page)
        self.main_notebook.AddPage(page, note.name)
        page.text.SetValue(note.text)
        page.text.SetFocus()
    
    def on_close(self, event):
        self.control.notes.save_notes(self.pages)
        Publisher().sendMessage('program.closed', None)
        self.Destroy()

# end of class MainWindow

if __name__ == '__main__':
    app = wx.App(False)
    main = MainWindow(None)
    app.SetTopWindow(main)
    main.Show()
    app.MainLoop()

