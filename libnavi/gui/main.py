# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Sat Apr 11 16:00:27 2009
from appcommon.i18n import _
from libnavi.gui.options import OptionsDialog
from pubsub import pub
from libnavi.gui.note import NotePage
from libnavi import meta
from appcommon.gui.main import BaseMainWindow

import wx

# begin wxGlade: dependencies
# end wxGlade

import wx.lib.flatnotebook as fnb


class MainWindow(BaseMainWindow):
    def __init__(self):
        # begin wxGlade: MainWindow.__init__
        BaseMainWindow.__init__(self, None, style=wx.DEFAULT_FRAME_STYLE)
        self.main_notebook = fnb.FlatNotebook(self)
        
        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CLOSE, self.on_close)
        # end wxGlade
        
        pub.subscribe(self.on_note_opened, 'note.opened')
        pub.subscribe(self.on_note_closed, 'note.closed')

    def __set_properties(self):
        # begin wxGlade: MainWindow.__set_properties
        self.SetTitle(meta.APPNAME)
        self.SetSize((720, 540))
        # end wxGlade
        style = self.main_notebook.GetWindowStyleFlag()
        style |= fnb.FNB_NO_X_BUTTON|fnb.FNB_MOUSE_MIDDLE_CLOSES_TABS
        style &= ~(fnb.FNB_TABS_BORDER_SIMPLE)
        style &= ~(fnb.FNB_VC71 | fnb.FNB_VC8 | fnb.FNB_FANCY_TABS | fnb.FNB_FF2)
        style |= fnb.FNB_VC8
        self.main_notebook.SetWindowStyleFlag(style)

    def __do_layout(self):
        # begin wxGlade: MainWindow.__do_layout
        main_sizer = wx.BoxSizer(wx.VERTICAL)
#        self.main_notebook.AddPage(self.main_text, _("tab1"))
        main_sizer.Add(self.main_notebook, 1, wx.EXPAND, 0)
        self.SetSizer(main_sizer)
        self.Layout()
        # end wxGlade
        
    def ask_note_name(self):
        dlg = wx.TextEntryDialog(self, _('Enter the note name:'), _('Note name'), '')
        name = ''
        if dlg.ShowModal() == wx.ID_OK:
            name = dlg.GetValue()
        dlg.Destroy()
        return name
    
    @property
    def current_note(self):
        sel = self.main_notebook.GetSelection()
        if sel == -1:
            return None
        else:
            return self.main_notebook.GetPage(sel).note
        
    @property
    def pages(self):
        return [self.main_notebook.GetPage(i) for i
                in xrange(self.main_notebook.GetPageCount())]

    def on_new_item_click(self, event): # wxGlade: MainWindow.<event_handler>
        event.Skip()
        
    def on_close_item_click(self, event): # wxGlade: MainWindow.<event_handler>
        event.Skip()
        
    def on_options_item_click(self, event): # wxGlade: MainWindow.<event_handler>
        options = OptionsDialog(self)
        options.ShowModal()
        event.Skip()

    def on_quit_item_click(self, event): # wxGlade: MainWindow.<event_handler>
        self.Close()

    def on_close(self, event):
        pub.sendMessage('program.closed', pages=self.pages)
        self.Destroy()
        
    def on_note_opened(self, note):
        page = NotePage(note, self.main_notebook)
        self.main_notebook.AddPage(page, note.name)
        page.text.SetValue(note.text)
        page.text.SetFocus()
        
    def on_note_closed(self, note):
        idx, page = [(idx, page) for idx, page in enumerate(self.pages)
                     if page.note is note][0]
        self.main_notebook.RemovePage(idx)
        page.Destroy()
    

# end of class MainWindow

if __name__ == '__main__':
    app = wx.App(False)
    main = MainWindow(None)
    app.SetTopWindow(main)
    main.Show()
    app.MainLoop()

